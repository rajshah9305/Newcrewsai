import { Card, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { FileText, Download, Eye, Code, BarChart3, FileSpreadsheet } from "lucide-react";
import type { File } from "@shared/schema";

interface FileCardProps {
  file: File;
}

export default function FileCard({ file }: FileCardProps) {
  const getFileIcon = (type: string) => {
    switch (type) {
      case "report": return FileText;
      case "code": return Code;
      case "data": return BarChart3;
      case "strategy": return FileSpreadsheet;
      default: return FileText;
    }
  };

  const getTypeColor = (type: string) => {
    switch (type) {
      case "report": return "bg-blue-100 text-blue-700 dark:bg-blue-900 dark:text-blue-300";
      case "code": return "bg-green-100 text-green-700 dark:bg-green-900 dark:text-green-300";
      case "data": return "bg-purple-100 text-purple-700 dark:bg-purple-900 dark:text-purple-300";
      case "strategy": return "bg-orange-100 text-orange-700 dark:bg-orange-900 dark:text-orange-300";
      default: return "bg-slate-100 text-slate-700 dark:bg-slate-700 dark:text-slate-300";
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  const FileIcon = getFileIcon(file.type);

  return (
    <Card className="card-hover">
      <CardContent className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className={`w-10 h-10 rounded-lg flex items-center justify-center ${getTypeColor(file.type).replace('text-', 'bg-').replace('-700', '-500/10').replace('-300', '-500/10')}`}>
              <FileIcon className="w-5 h-5" />
            </div>
            <div>
              <h3 className="font-semibold text-slate-800 dark:text-slate-200">
                {file.name}
              </h3>
              <Badge className={`text-xs ${getTypeColor(file.type)} mt-1`}>
                {file.type}
              </Badge>
            </div>
          </div>
          <Button variant="ghost" size="sm">
            <Eye className="w-4 h-4" />
          </Button>
        </div>

        <div className="space-y-3 mb-4">
          <div className="flex justify-between text-sm">
            <span className="text-slate-600 dark:text-slate-400">Size</span>
            <span className="text-slate-800 dark:text-slate-200 font-medium">
              {formatFileSize(file.size)}
            </span>
          </div>
          
          <div className="flex justify-between text-sm">
            <span className="text-slate-600 dark:text-slate-400">Format</span>
            <span className="text-slate-800 dark:text-slate-200 font-medium">
              {file.mimeType?.split('/')[1]?.toUpperCase() || 'Unknown'}
            </span>
          </div>
          
          {file.generatedBy && (
            <div className="flex justify-between text-sm">
              <span className="text-slate-600 dark:text-slate-400">Generated by</span>
              <span className="text-slate-800 dark:text-slate-200 font-medium">
                {file.generatedBy}
              </span>
            </div>
          )}
        </div>

        <div className="flex items-center justify-between pt-4 border-t border-slate-200 dark:border-slate-700">
          <span className="text-xs text-slate-500 dark:text-slate-400">
            {file.createdAt ? new Date(file.createdAt).toLocaleDateString() : 'Unknown date'}
          </span>
          <div className="flex space-x-2">
            <Button variant="outline" size="sm">
              <Download className="w-4 h-4" />
            </Button>
            <Button size="sm" className="bg-primary hover:bg-primary/90">
              View
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}